<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_knight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>abs_3d_object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup physics and create player 2
/*var mainFixture, o_id;
mainFixture = physics_fixture_create();
physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);
o_id=instance_create(x+300, y, obj_player2);
physics_fixture_bind(mainFixture, id);
physics_fixture_bind(mainFixture, o_id);
physics_joint_rope_create(id, o_id, x, y, o_id.x, o_id.y, 300, 0);
physics_fixture_delete(mainFixture);*/

//Source: https://www.youtube.com/watch?v=K9TZS6WaVDo
offset_x = 0;
xShift = 10;
host = self;

springyness = 12;
update_rate = 10;
collide = false;

next_rope = instance_create(x-offset_x, y, obj_rope);

//attach = physics_joint_distance_create(host, next_rope, host.x, host.y, next_rope.x, next_rope.y, false);
attach = physics_joint_weld_create(host, next_rope, host.x, host.y, 0, update_rate, springyness, collide);
//physics_joint_set_value(attach, phy_joint_damping_ratio, springyness); //Springyness
//physics_joint_set_value(attach, phy_joint_frequency, update_rate); //Update rate
with next_rope {
    parent = other.id;
}

repeat(60) {
    offset_x += xShift;
    last_rope = next_rope;
    next_rope = instance_create(x-offset_x, y, obj_rope);
    
    //link = physics_joint_distance_create(last_rope, next_rope, last_rope.x, last_rope.y, next_rope.x, next_rope.y, false);
    link = physics_joint_weld_create(last_rope, next_rope, last_rope.x, last_rope.y, 0, update_rate, springyness, collide);
    //physics_joint_set_value(link, phy_joint_damping_ratio, springyness); //Springyness
    //physics_joint_set_value(link, phy_joint_frequency, update_rate); //Update rate
    
    with next_rope {
        parent = other.last_rope;
    }
}

offset_x += xShift;
last_rope = next_rope;
next_rope = instance_create(x-offset_x, y, obj_player2);
next_rope.anim_angle = 180;

//link = physics_joint_distance_create(last_rope, next_rope, last_rope.x, last_rope.y, next_rope.x, next_rope.y, false);
link = physics_joint_weld_create(next_rope, last_rope, next_rope.x, next_rope.y, 0, update_rate, springyness, collide);
//physics_joint_set_value(link, phy_joint_damping_ratio, springyness); //Springyness
//physics_joint_set_value(link, phy_joint_frequency, update_rate); //Update rate

with next_rope {
    parent = other.last_rope;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///focus me
dev_camera.focus = self;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
movement_speed = 2000;
max_speed = 5;

if keyboard_check(ord('W')) {
    physics_apply_force(x, y, movement_speed*dsin(view_angle),
                            -movement_speed*dcos(view_angle));
}
if keyboard_check(ord('S')) {
    physics_apply_force(x, y, -movement_speed*dsin(view_angle),
                            movement_speed*dcos(view_angle));
}
if keyboard_check(ord('A')) {
    physics_apply_force(x, y, -movement_speed*dcos(view_angle), 
                            -movement_speed*dsin(view_angle));
}
if keyboard_check(ord('D')) {
    physics_apply_force(x, y, movement_speed*dcos(view_angle),
                            movement_speed*dsin(view_angle));
}

if keyboard_check(ord('Q')) {
    phy_rotation += 10;
}
if keyboard_check(ord('E')) {
    phy_rotation -= 10;
}

phy_speed_x = clamp(phy_speed_x, -max_speed, max_speed);
phy_speed_y = clamp(phy_speed_y, -max_speed, max_speed);
//phy_linear_velocity_x = min(phy_linear_velocity_x, max_speed);
//hy_linear_velocity_y = min(phy_linear_velocity_y, max_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_box">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>poo</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rex">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,10</point>
    <point>10,10</point>
  </PhysicsShapePoints>
</object>
